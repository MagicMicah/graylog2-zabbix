#!/bin/bash
# set -x

# Debug override -- uncomment to write to $LOG, silent otherwise.
# DEBUG=1

## Defaults ##
CREDS_FILE=$(dirname $BASH_SOURCE)/check_graylog_node_creds.txt
source $CREDS_FILE
LOG=/tmp/$(basename $0).log
APIPORT=12900
## End defaults  ##

usage() {
    cat <<EOF
Usage: $0 -H <HOSTNAME> -a <ATTRIBUTE> [-p <GRAYLOG_API_PORT>] [-h] [-d]

Args:
    -H : Hostname or IP address of graylog server
    -a : Attribute to monitor. See list below.
    -p : Graylog API port (default: 12900)
    -d : Debug message to log file (default: false)
    -h : Displays help

List of attributes:
    - node_id : returns graylog node_id
    - node_transport
    - node_is_master
    - node_cluster
    - node_type
    - node_throughput
    - lb_status
    - total_message_count 
    - es_cluster_health
    - journal_size
    - journal_num_segments
    - journal_uncommitted_entries
    - journal_events_read
    - journal_events_append
    - buffer_input_utilization
    - buffer_output_utilization
    - buffer_input_utilization_percent
    - buffer_output_utilization_percent
    - poll_data
    - current_deflector (not yet supported, because not accessible via regular user)
    - system_lifecycle                       
    - system_isprocessing
    - system_tz
    - system_version
    - system_startedat
    - cluster_stream_count
    - cluster_stream_rule_count
    - cluster_user_count
    - cluster_output_count
    - cluster_dashboard_count
    - cluster_input_count
    - cluster_global_input_count
    - cluster_extractor_count
    - cluster_contentpack_count              
    - cluster_alerts_count
EOF
}

while getopts hH:a:p::l:d opts; do
    case $opts in
        H)  HOSTNAME=$OPTARG
            ;;
        a)  ATTR=$OPTARG
            ;;
        p)  APIPORT=$OPTARG
            ;;
        h)  usage; exit 0
            ;;
        d)  DEBUG=1
            ;;
        :)  echo "Option -$OPTARG requires an argument."
            exit 1
            ;;
        *)  echo "Invalid option -${OPTARG}."
            exit 1
            ;;
    esac
done

# exit if less than 2 attributes are passed in
[[ $OPTIND -lt 4 ]] && usage && exit 1

CURL_BASE_CMD="curl -u ${USERNAME}:${PASSWORD} -s http://${HOSTNAME}:${APIPORT}"

get_json_info() {
    # $1 = URI -- $2 filename
    debug "[$FUNCNAME] [$(basename $2)] Pulling json data"
    starttime=`date +%s%3N`
    ${CURL_BASE_CMD}${1} | jq '.' > $2
    endtime=`date +%s%3N`
    let runtime=${endtime}-${starttime}
    debug "[$FUNCNAME] [$(basename $2)] --> $runtime ms"
}

# Node related information -- /system/cluster/node
NODE_INFO_FILE=/tmp/${HOSTNAME}-node.json
get_node_info() { get_json_info "/system/cluster/node" $NODE_INFO_FILE ; }
get_node_id() { debug "[$FUNCNAME] Executing" ;jq -r '.node_id' $NODE_INFO_FILE ; }
get_node_transport_addr() { debug "[$FUNCNAME] Executing" ; jq -r '.transport_address' $NODE_INFO_FILE ; }
get_node_is_master() { debug "[$FUNCNAME] Executing" ; jq -r '.is_master' $NODE_INFO_FILE ; }
get_node_cluster() { debug "[$FUNCNAME] Executing" ; jq -r '.cluster_id' $NODE_INFO_FILE ; }
get_node_type() { debug "[$FUNCNAME] Executing" ; jq -r '.type' $NODE_INFO_FILE ; }


# Journal related information -- /system/journal
JOURNAL_INFO_FILE=/tmp/${HOSTNAME}-journal.json
get_system_journal_info() { get_json_info "/system/journal" $JOURNAL_INFO_FILE ; }
get_system_journal_events_read() { debug "[$FUNCNAME] Executing" ; jq -r '.read_events_per_second' $JOURNAL_INFO_FILE ; }
get_system_journal_events_append() { debug "[$FUNCNAME] Executing" ; jq -r '.append_events_per_second' $JOURNAL_INFO_FILE ; }
get_system_journal_size() { debug "[$FUNCNAME] Executing" ; jq -r '.journal_size' $JOURNAL_INFO_FILE ; }
get_system_journal_num_segments() { debug "[$FUNCNAME] Executing" ; jq -r '.number_of_segments' $JOURNAL_INFO_FILE ; }
get_system_journal_uncommitted_entries() { debug "[$FUNCNAME] Executing" ; jq -r '.uncommitted_journal_entries' $JOURNAL_INFO_FILE ; }


# Buffer related information -- /system/buffers
BUFFER_INFO_FILE=/tmp/${HOSTNAME}-buffer.json
get_system_buffer_info() { get_json_info "/system/buffers" $BUFFER_INFO_FILE ; }
get_system_buffer_input_utilization() { debug "[$FUNCNAME] Executing" ; jq -r '.buffers.input.utilization' $BUFFER_INFO_FILE ; }
get_system_buffer_input_utilization_percent() { debug "[$FUNCNAME] Executing" ; jq -r '.buffers.input.utilization_percent' $BUFFER_INFO_FILE ; }
get_system_buffer_output_utilization() { debug "[$FUNCNAME] Executing" ; jq -r '.buffers.output.utilization' $BUFFER_INFO_FILE ; }
get_system_buffer_output_utilization_percent() { debug "[$FUNCNAME] Executing" ; jq -r '.buffers.output.utilization_percent' $BUFFER_INFO_FILE ; }

# System overview
SYSTEM_INFO_FILE=/tmp/${HOSTNAME}-system.json
get_system_system_info() { get_json_info "/system" $SYSTEM_INFO_FILE ; }
get_system_lb_status() { debug "[$FUNCNAME] Executing" ; jq -r '.lb_status' $SYSTEM_INFO_FILE ;  }
get_system_lifecycle() { debug "[$FUNCNAME] Executing" ; jq -r '.lifecycle' $SYSTEM_INFO_FILE ;  }
get_system_isprocessing() { debug "[$FUNCNAME] Executing" ; jq -r '.is_processing' $SYSTEM_INFO_FILE ;  }
get_system_tz() { debug "[$FUNCNAME] Executing" ; jq -r '.timezone' $SYSTEM_INFO_FILE ;  }
get_system_version() { debug "[$FUNCNAME] Executing" ; jq -r '.version' $SYSTEM_INFO_FILE ;  }
get_system_startedat() { debug "[$FUNCNAME] Executing" ; jq -r '.started_at' $SYSTEM_INFO_FILE ;  }

# Cluster overview
CLUSTER_INFO_FILE=/tmp/${HOSTNAME}-cluster.json
get_cluster_info() { get_json_info "/system/cluster/stats" $CLUSTER_INFO_FILE ; }
get_cluster_stream_count() { debug "[$FUNCNAME] Executing" ; jq -r '.stream_count' $CLUSTER_INFO_FILE ; }
get_cluster_stream_rules_count() { debug "[$FUNCNAME] Executing" ; jq -r '.stream_rule_count' $CLUSTER_INFO_FILE ; }
get_cluster_user_count() { debug "[$FUNCNAME] Executing" ; jq -r '.user_count' $CLUSTER_INFO_FILE ; }
get_cluster_output_count() { debug "[$FUNCNAME] Executing" ; jq -r '.output_count' $CLUSTER_INFO_FILE ; }
get_cluster_dashboard_count() { debug "[$FUNCNAME] Executing" ; jq -r '.dashboard_count' $CLUSTER_INFO_FILE ; }
get_cluster_input_count() { debug "[$FUNCNAME] Executing" ; jq -r '.input_count' $CLUSTER_INFO_FILE ; }
get_cluster_global_input_count() { debug "[$FUNCNAME] Executing" ; jq -r '.global_input_count' $CLUSTER_INFO_FILE ; }
get_cluster_extractor_count() { debug "[$FUNCNAME] Executing" ; jq -r '.extractor_count' $CLUSTER_INFO_FILE ; }
get_cluster_contentpack_count() { debug "[$FUNCNAME] Executing" ; jq -r '.content_pack_count' $CLUSTER_INFO_FILE ; }
get_cluster_alerts_count() { debug "[$FUNCNAME] Executing" ; jq -r '.alarm_stats.alert_count' $CLUSTER_INFO_FILE ; }
get_cluster_es_state() { debug "[$FUNCNAME] Executing" ; jq -r '.elasticsearch.status' $CLUSTER_INFO_FILE ; }

# Various ungrouped checks
get_total_message_count() { debug "[$FUNCNAME] Executing" ; ${CURL_BASE_CMD}/count/total | jq -r .events ; }
get_node_throughput() { debug "[$FUNCNAME] Executing" ; ${CURL_BASE_CMD}/system/throughput | jq -r .throughput ; }
get_current_deflector() { debug "[$FUNCNAME] Executing" ; ${CURL_BASE_CMD}/system/deflector | jq -r .current_target ; }

poll_data() {
    debug "[$FUNCNAME] [$(basename $NODE_INFO_FILE)] Getting node info"; get_node_info &
    debug "[$FUNCNAME] [$(basename $JOURNAL_INFO_FILE)] Getting journal info"; get_system_journal_info &
    debug "[$FUNCNAME] [$(basename $BUFFER_INFO_FILE)] Getting buffer info"; get_system_buffer_info &
    debug "[$FUNCNAME] [$(basename $SYSTEM_INFO_FILE)] Getting system info"; get_system_system_info &
    debug "[$FUNCNAME] [$(basename $CLUSTER_INFO_FILE)] Getting system info"; get_cluster_info &

    wait

    if [ -s $NODE_INFO_FILE ] && [ -s $JOURNAL_INFO_FILE ] && [ -s $BUFFER_INFO_FILE ]; then
        echo "OK"
    else
        echo "FAIL"
    fi
}

debug() { 
    if [ ! -z $DEBUG ]; then
        # PPID should be the zabbix poller process and $$ the shell process
        echo -e "$(date '+%Y%m%d %H:%M:%S.%3N') {$PPID} [$$] $@" >> $LOG
    fi
}

case $ATTR in
    node_id)                                get_node_id                                           ;;
    node_transport)                         get_node_transport_addr                               ;;
    node_is_master)                         get_node_is_master                                    ;;
    node_cluster)                           get_node_cluster                                      ;;
    node_type)                              get_node_type                                         ;;
    journal_events_read)                    get_system_journal_events_read                        ;;
    journal_events_append)                  get_system_journal_events_append                      ;; 
    journal_size)                           get_system_journal_size                               ;; 
    journal_num_segments)                   get_system_journal_num_segments                       ;; 
    journal_uncommitted_entries)            get_system_journal_uncommitted_entries                ;;
    buffer_input_utilization)               get_system_buffer_input_utilization                   ;;
    buffer_input_utilization_percent)       get_system_buffer_input_utilization_percent           ;;
    buffer_output_utilization)              get_system_buffer_output_utilization                  ;;
    buffer_output_utilization_percent)      get_system_buffer_output_utilization_percent          ;;
    lb_status)                              get_system_lb_status                                  ;;
    total_message_count)                    get_total_message_count                               ;;
    es_cluster_health)                      get_cluster_es_state                                  ;;
    node_throughput)                        get_node_throughput                                   ;;
    poll_data)                              poll_data                                             ;;
    current_deflector)                      get_current_deflector                                 ;;
    system_lifecycle)                       get_system_lifecycle                                  ;;
    system_isprocessing)                    get_system_isprocessing                               ;;
    system_tz)                              get_system_tz                                         ;;
    system_version)                         get_system_version                                    ;;
    system_startedat)                       get_system_startedat                                  ;;
    cluster_stream_count)                   get_cluster_stream_count                              ;;
    cluster_stream_rule_count)              get_cluster_stream_rules_count                        ;;
    cluster_user_count)                     get_cluster_user_count                                ;;
    cluster_output_count)                   get_cluster_output_count                              ;;
    cluster_dashboard_count)                get_cluster_dashboard_count                           ;;
    cluster_input_count)                    get_cluster_input_count                               ;;
    cluster_global_input_count)             get_cluster_global_input_count                        ;;
    cluster_extractor_count)                get_cluster_extractor_count                           ;;
    cluster_contentpack_count)              get_cluster_contentpack_count                         ;;
    cluster_alerts_count)                   get_cluster_alerts_count                              ;;
    
    *)  debug "[Attribute error] Unknown attribute to monitor." && echo "Unknown attribute to monitor"                        ;;
esac
